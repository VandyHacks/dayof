{"id":"UNnr","dependencies":[{"name":"C:\\Users\\kzhai\\VandyHacks\\vandyhacksnotifications\\package.json","includedInParent":true,"mtime":1540882116534},{"name":"C:\\Users\\kzhai\\VandyHacks\\vandyhacksnotifications\\.babelrc","includedInParent":true,"mtime":1540875229523},{"name":"C:\\Users\\kzhai\\VandyHacks\\vandyhacksnotifications\\node_modules\\mongoose\\package.json","includedInParent":true,"mtime":1539064513239},{"name":"../error/cast","loc":{"line":3,"column":26},"parent":"C:\\Users\\kzhai\\VandyHacks\\vandyhacksnotifications\\node_modules\\mongoose\\lib\\cast\\boolean.js","resolved":"C:\\Users\\kzhai\\VandyHacks\\vandyhacksnotifications\\node_modules\\mongoose\\lib\\error\\cast.js"}],"generated":{"js":"\"use strict\";const e=require(\"../error/cast\"),r=[!0,\"true\",1,\"1\",\"yes\"],n=[!1,\"false\",0,\"0\",\"no\"];module.exports=function(t,o){if(null==t)return t;if(-1!==r.indexOf(t))return!0;if(-1!==n.indexOf(t))return!1;throw new e(\"boolean\",t,o)};","map":{"mappings":[{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":3,"column":0},"generated":{"line":1,"column":13}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"CastError","original":{"line":3,"column":6},"generated":{"line":1,"column":19}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"require","original":{"line":3,"column":18},"generated":{"line":1,"column":21}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":3,"column":26},"generated":{"line":1,"column":29}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"convertToTrue","original":{"line":5,"column":6},"generated":{"line":1,"column":46}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":5,"column":22},"generated":{"line":1,"column":48}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":5,"column":23},"generated":{"line":1,"column":50}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":5,"column":29},"generated":{"line":1,"column":52}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":5,"column":37},"generated":{"line":1,"column":59}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":5,"column":40},"generated":{"line":1,"column":61}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":5,"column":45},"generated":{"line":1,"column":65}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"convertToFalse","original":{"line":6,"column":6},"generated":{"line":1,"column":72}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":6,"column":23},"generated":{"line":1,"column":74}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":6,"column":24},"generated":{"line":1,"column":76}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":6,"column":31},"generated":{"line":1,"column":78}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":6,"column":40},"generated":{"line":1,"column":86}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":6,"column":43},"generated":{"line":1,"column":88}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":6,"column":48},"generated":{"line":1,"column":92}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"module","original":{"line":19,"column":0},"generated":{"line":1,"column":98}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"exports","original":{"line":19,"column":7},"generated":{"line":1,"column":105}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":19,"column":17},"generated":{"line":1,"column":113}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"value","original":{"line":19,"column":38},"generated":{"line":1,"column":122}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"path","original":{"line":19,"column":45},"generated":{"line":1,"column":124}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"value","original":{"line":20,"column":6},"generated":{"line":1,"column":127}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":20,"column":15},"generated":{"line":1,"column":130}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"value","original":{"line":20,"column":6},"generated":{"line":1,"column":136}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"value","original":{"line":21,"column":11},"generated":{"line":1,"column":138}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"value","original":{"line":21,"column":11},"generated":{"line":1,"column":145}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"convertToTrue","original":{"line":25,"column":6},"generated":{"line":1,"column":147}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":25,"column":40},"generated":{"line":1,"column":151}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"convertToTrue","original":{"line":25,"column":6},"generated":{"line":1,"column":155}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"indexOf","original":{"line":25,"column":20},"generated":{"line":1,"column":157}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"value","original":{"line":25,"column":28},"generated":{"line":1,"column":165}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":26,"column":11},"generated":{"line":1,"column":168}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":26,"column":11},"generated":{"line":1,"column":175}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"convertToFalse","original":{"line":28,"column":6},"generated":{"line":1,"column":177}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":28,"column":41},"generated":{"line":1,"column":181}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"convertToFalse","original":{"line":28,"column":6},"generated":{"line":1,"column":185}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"indexOf","original":{"line":28,"column":21},"generated":{"line":1,"column":187}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"value","original":{"line":28,"column":29},"generated":{"line":1,"column":195}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":29,"column":11},"generated":{"line":1,"column":198}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":29,"column":11},"generated":{"line":1,"column":205}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":8},"generated":{"line":1,"column":207}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":8},"generated":{"line":1,"column":213}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"CastError","original":{"line":31,"column":12},"generated":{"line":1,"column":217}},{"source":"node_modules/mongoose/lib/cast/boolean.js","original":{"line":31,"column":22},"generated":{"line":1,"column":219}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"value","original":{"line":31,"column":33},"generated":{"line":1,"column":229}},{"source":"node_modules/mongoose/lib/cast/boolean.js","name":"path","original":{"line":31,"column":40},"generated":{"line":1,"column":231}}],"sources":{"node_modules/mongoose/lib/cast/boolean.js":"'use strict';\n\nconst CastError = require('../error/cast');\n\nconst convertToTrue = [true, 'true', 1, '1', 'yes'];\nconst convertToFalse = [false, 'false', 0, '0', 'no'];\n\n/*!\n * Given a value, cast it to a boolean, or throw a `CastError` if the value\n * cannot be casted. `null` and `undefined` are considered valid.\n *\n * @param {Any} value\n * @param {String} [path] optional the path to set on the CastError\n * @return {Boolean|null|undefined}\n * @throws {CastError} if `value` is not one of the allowed values\n * @api private\n */\n\nmodule.exports = function castBoolean(value, path) {\n  if (value == null) {\n    return value;\n  }\n\n  // strict mode (throws if value is not a boolean, instead of converting)\n  if (convertToTrue.indexOf(value) !== -1) {\n    return true;\n  }\n  if (convertToFalse.indexOf(value) !== -1) {\n    return false;\n  }\n  throw new CastError('boolean', value, path);\n};\n"},"lineCount":null}},"hash":"a53a6806de76e0e01d1390a3d77ac0d3","cacheData":{"env":{}}}